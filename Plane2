void UCreateMeshPlane2(GLMesh& mesh)
{

const float textureWidth = 6668.f;
	const float textureHeight = 3046.f;
	const float matteTextureWidth = 3064.f;

	const float frontFaceOffset = matteTextureWidth / textureWidth;
	
  
  
  const float verts[] = {
		// front face
		-0.5f,  0.5882f, 1.0f,	      0.f, 0.f, 1.f,	    frontFaceOffset, 0.54f,	
		 0.5f,  0.5882f, 1.0f,	      0.f, 0.f, 1.f,	    1.f, 0.54f, 				
		 0.5f, -0.5882f, 1.0f,	      0.f, 0.f, 1.f,	    1.f, 0.0f,								
		 0.5f, -0.5882f, 1.0f,	      0.f, 0.f, 1.f,	    1.f, 0.0f,								
		-0.5f,  0.5882f, 1.0f,	      0.f, 0.f, 1.f,	    frontFaceOffset, 0.54f,	
		-0.5f, -0.5882f, 1.0f,	      0.f, 0.f, 1.f,	    frontFaceOffset, 0.f,					

		// right face
		 0.5f,  0.5882f, 1.0f,	      1.f, 0.f, 0.f,	    0.07, 1.f,					
		 0.5f,  0.5882f, 0.93f,	      1.f, 0.f, 0.f,	    0.0f, 1.f,								
		 0.5f, -0.5882f, 1.0f,	      1.f, 0.f, 0.f,	    0.0f, 0.0f,								
		 0.5f, -0.5882f, 1.0f,	      1.f, 0.f, 0.f,	    0.0f, 0.0f,								
		 0.5f,  0.5882f, 0.93f,	      1.f, 0.f, 0.f,	    0.0f, 1.f,								
		 0.5f, -0.5882f, 0.93f,	      1.f, 0.f, 0.f,	    0.07f, 0.0f,					

		// back face
		-0.5f,  0.5882f, 0.93f,	      0.f, 0.f, -1.f,	    frontFaceOffset, 1.f, 				
		 0.5f,  0.5882f, 0.93f,	      0.f, 0.f, -1.f,	    0.f, 1.0f, 								
		-0.5f, -0.5882f, 0.93f,	      0.f, 0.f, -1.f,	    0.0f, 0.0f,								
		-0.5f, -0.5882f, 0.93f,	      0.f, 0.f, -1.f,	    0.0f, 0.0f,								
		 0.5f,  0.5882f, 0.93f,	      0.f, 0.f, -1.f,	    0.0f, 1.0f,								
		 0.5f, -0.5882f, 0.93f,	      0.f, 0.f, -1.f,	    frontFaceOffset, 0.0f,				

		// left face
		-0.5f,  0.5882f, 1.0f,	     -1.f, 0.f,  0.f,	    0.07, 1.f,					
		-0.5f,  0.5882f, 0.93f,	     -1.f, 0.f,  0.f,	    0.0f, 1.0f,								
		-0.5f, -0.5882f, 0.93f,	     -1.f, 0.f,  0.f,	    0.0f, 0.0f,								
		-0.5f, -0.5882f, 0.93f,	     -1.f, 0.f,  0.f,	    0.0f, 0.0f,								
		-0.5f,  0.5882f, 1.0f,	     -1.f, 0.f,  0.f,	    0.0f, 1.0f,							 
		-0.5f, -0.5882f, 1.0f,	     -1.f, 0.f,  0.f,	    0.07, 0.0f,					

		// bottom face
	  -0.5f, -0.5882f, 1.0f,	      0.f, -1.f, 0.f,	    0.07, 1.f,					
		 0.5f, -0.5882f, 1.0f,	      0.f, -1.f, 0.f,	    0.0f, 1.0f,								
		-0.5f, -0.5882f, 0.93f,       0.f, -1.f, 0.f,	    0.0f, 0.0f,								
		-0.5f, -0.5882f, 0.93f,	      0.f, -1.f, 0.f,	    0.0f, 0.0f,							
		 0.5f, -0.5882f, 1.0f,	      0.f, -1.f, 0.f,	    0.0f, 1.0f,								
		 0.5f, -0.5882f, 0.93f,	      0.f, -1.f, 0.f,	    0.07, 0.0f,		

		// top face
		-0.5f, 0.5882f, 1.0f,	      0.f, 1.f, 0.f,	     0.07, 1.f,					
		-0.5f, 0.5882f, 0.93f,	      0.f, 1.f, 0.f,	     0.0f, 1.0f,								
		 0.5f, 0.5882f, 0.93f,	      0.f, 1.f, 0.f,	     0.0f, 0.0f,								
		 0.5f, 0.5882f, 0.93f,	      0.f, 1.f, 0.f,	     0.0f, 0.0f,								
		-0.5f, 0.5882f, 1.0f,	      0.f, 1.f, 0.f,	     0.0f, 1.0f,								
		 0.5f, 0.5882f, 1.0f,	      0.f, 1.f, 0.f,	     0.07, 0.0f,				

		
	};

	const int floatsPerVertex = 3;
	const int floatsPerNormal = 3;
	const int floatsPerTexture = 2;
	const int stride = floatsPerVertex + floatsPerNormal + floatsPerTexture;
	
	glGenVertexArrays(1, &mesh.plane2Vao); // we can also generate multiple VAOs or buffers at the same time
    glBindVertexArray(mesh.plane2Vao);

    // Create 1 buffers: first one for the vertex data; second one for the indices
    glGenBuffers(1, mesh.plane2Vbo);
    glBindBuffer(GL_ARRAY_BUFFER, mesh.plane2Vbo[0]); // Activates the buffer
    glBufferData(GL_ARRAY_BUFFER, sizeof(verts), verts, GL_STATIC_DRAW); // Sends vertex or coordinate data to the GPU


    mesh.plane2Vertices = sizeof(indices) / sizeof(indices[0]);
    glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, mesh.plane2Vbo[1]);
    glBufferData(GL_ELEMENT_ARRAY_BUFFER, sizeof(indices), indices, GL_STATIC_DRAW);

    // Strides between vertex coordinates is 6 (x, y, z, r, g, b, a). A tightly packed stride is 0.
    GLint stride2 = sizeof(float) * (floatsPerVertex + floatsPerColor);// The number of floats before each

    // Create Vertex Attribute Pointers
    glVertexAttribPointer(0, floatsPerVertex, GL_FLOAT, GL_FALSE, stride2, 0);
    glEnableVertexAttribArray(0);

    glVertexAttribPointer(1, floatsPerColor, GL_FLOAT, GL_FALSE, stride2, (char*)(sizeof(float) * floatsPerVertex2));
    glEnableVertexAttribArray(1);

    glVertexAttribPointer(2, floatsPerUV, GL_FLOAT, GL_FALSE, stride2, (char*)(sizeof(float) * (floatsPerVertex2 + floatsPerColor2)));
    glEnableVertexAttribArray(2);

};
